#!/bin/sh

set -eu

MOUNT_NAME="$(basename "$VOL_DIR")"
CACHE_DIR="$(dirname "$VOL_DIR")/.cache"
CACHE_NAME="${PVC_ANNOTATION_CACHE_NAME:-$(echo "$PVC_NAME" | sed -E 's/^(.+)-[^-]+$/\1/')}"
CACHE_IMAGE="cache/$CACHE_NAME"

# Args: NAME VALUE
validate() {
	PATTERN='^[-_a-z0-9]+$'
	echo "$2" | grep -Eq "$PATTERN" \
		|| (echo "invalid $1 argument provided: $2 (must match $PATTERN)" >&2; false)
}

buildah() {
	/usr/bin/buildah \
		--root=$CACHE_DIR/containers/storage \
		--storage-driver=overlay \
		"$@"
}

# Mounts a volume directory based on the latest CACHE_NAME image.
mountCache() {
	echo "Creating volume $VOL_DIR from cache '$CACHE_NAME'" >&2
	mkdir -m 0777 "$VOL_DIR" || exit 2
	(
		# Create new volume from cache's latest container image
		# (The latest cache image could be pulled from a registry here)
		(buildah from --pull-never --name "$MOUNT_NAME" "$CACHE_IMAGE" \
			|| ([ $? -eq 125 ] && (
				buildah delete "$MOUNT_NAME"
				buildah from --name "$MOUNT_NAME" scratch
		))) >/dev/null &&
		CONTAINERDIR="$(buildah mount "$MOUNT_NAME")" &&
		mount -o bind,rshared "$CONTAINERDIR" "$VOL_DIR" &&
		chmod 0777 "$VOL_DIR"
	) || (
		umount "$VOL_DIR" 2>/dev/null 1>&2
		buildah umount "$MOUNT_NAME" 2>/dev/null 1>&2
		buildah delete "$MOUNT_NAME" 2>/dev/null 1>&2
		rm -rf "$VOL_DIR"
		false
	)
	echo "$VOL_DIR"
}

# Unmounts a cache volume directory, commits it and tags it as latest image for the given CACHE_NAME.
umountCache() {
	# Commit volume only if dir is mounted (node restart results in unmounted volumes).
	if mountpoint -q "$VOL_DIR"; then
		echo "Committing volume $VOL_DIR to cache '$CACHE_NAME'" >&2
		IMGID="$(buildah commit -q --timestamp 1 "$MOUNT_NAME")" &&
		buildah tag "$IMGID" "$CACHE_IMAGE" &&
		# The latest cache image could be pushed to a registry here
		umount "$VOL_DIR"
	fi

	# Delete volume / container
	echo "Deleting volume $VOL_DIR" >&2
	buildah umount "$MOUNT_NAME" >/dev/null || true
	buildah delete "$MOUNT_NAME" >/dev/null || true
	rm -rf "$VOL_DIR" || (printf 'error: volume deletion blocked by mount: '; grep $MOUNT_NAME /etc/mtab; false) >&2
}


mkdir -p "$CACHE_DIR/containers/storage"
validate CACHE_NAME "$CACHE_NAME"
validate MOUNT_NAME "$MOUNT_NAME"

if [ "${1:-}" = teardown ]; then
	umountCache
else
	mountCache
fi
